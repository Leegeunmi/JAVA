WEB

	web / internet
	HTTP / HTML 	http프로토콜
			HTTP(Hypertext Transfer Protocol)는 인터넷상에서 데이터를 주고 받기 위한 서버/클라이언트 모델을 따르는 프로토콜이다.
			애플리케이션 레벨의 프로토콜로 TCP/IP위에서 작동한다.

			하이퍼텍스트 기반으로(Hypertext) 데이터를 전송하겠다(Transfer) = 링크기반으로 데이터에 접속하겠다는 의미이다.
			
			Connectionless & Stateless
			HTTP는 Connectionless 방식으로 작동한다. 
			서버에 연결하고, 요청해서 응답을 받으면 연결을 끊어버린다.
 			https://shlee0882.tistory.com/107
			1.인증받은회원인가 2.지속적으로 사용한자인가
			연결이 된건 아니지만 연결이 되어 보이게 한다. (로그인해야 연결)

			HTML은 정적문서이고 동적으로 만들기위해서 script등장
			정적문자를 애플리케이션화(동적결정에의해 필요에따라 처리하겠다)하고자 하는 것이 http
			http는 html과 같은 정적문서를 동적으로 보이게 하기위한다._애플리케이션화 하고있다.
			초기에는 장점이였으나 갈수록 단점화..?

			멀티스레드
			요청과 응답	stateless
			서버가 가지고 있는 stream을 밀어내주는것이 html
			브라우저는 html을 파싱한다.

			쉬운 프로그램 방식	위직방식
			미래에는 컴포넌트화될것 (지금도 컴포넌트화 하고있다)
			*우리의 목적은 웹컴포넌트를 만드는것이다.
			모듈들을 부품화한다.
			클래스가 모여 컴포넌트 - 컴포넌트가 모여 애플리케이션
			완전한 재사용은 애플리케이션자체를 재사용하는 것.
			

			HTTP	요청)	- 요청메소드(get,post,put...)
					- url(특정문서,자원이있는위치)
					- 전달해야할 parameter
						브라우저에서 서버로 유알엘통해서 연결할때 get/post방식으로 연결한다.
						연결할때 파라메터를 전달한다. 
			
				응답)	- 응답코드(상태코드)ex) 404 .. 403..500....
					- 컨텐츠타입(텍스트,오디오,영상...타입)
					- 컨텐츠(바디)_프로토콜(규격)안에 바디
			html은 서버에 있다. script도 서버에 있다. 동작은 브라우저에서
	

	servlet / JSP	있는것도 동작,처리도 서버에서 하고 결과만 브라우저로 
	Model
	WAS



웹 사이트와 URL
	웹 사이트는 정적 문서로 구성된 사이트

	URL 구성
		protocol://host:port/path/file  -> 기본구성
		http://www.season.com:80/spring/april/html
		http://www.season.com/spring/april/html
		http://www.season.com -> 생략이 됨

	파라메터
		주소 뒤에 추가로 붙는 데이터
		?(물음표)를 사용해서 주소 경로와 구분 (?부터 파라메터 시작)
		http://www.season.com/spring/april/html?weather=sunny&temp=25

	HTTP 메소드 (GET)
		요청 방식에 따라 GET/POST로 구분
		GET 요청 방식
			단순히 서버에게 자원(HTML, 이미지, 문서)을 URL 통해 요청하는 방식
			필요한 데이터를 URL 뒤에 덧붙여 전송
			데이터 크기 제약이 있으며 북마킹을 허용(지원)
			브라우저 캐싱에 의한 보안 문제를 야기한다.(로그인했을때 주소창에 아이디비번 노출 등)? ->post를 써야한다.
		POST 요청방식
			주로 폼에서 사용되는 방식으로 웹 컨텐츠의 내용을 변경하기 위해 사용
			get은 뭔가를 읽어온다. post는 뭔가를 바꾼다.(정보를 새로 db에 넣는다./로그인은 보안문제로 post사용)
			get을 써야할 때 post를 쓰면? - 북마킹이 안된다. / 검색이 안된다.
			필요한 데이터를 HTTP요청의 메세지 바디를 통해 전송
			데이타의 양이 많거나 URL에 노출되지 말아야할 때 사용
			

웹 애플리케이션
	웹 사이트 + Dynamic working service (CGI Processing)
	CGI (Common Gateway Interface)
		- 웹서버에 존재하는 프로그램을 호출할 수 있는 기술
		   원격호출 어떻게 호출하는가..? 그것에 대한 표준화를 한 것이 CGI	

		- 웹 애플리케이션이 동작되는 서버 - WAS
		- Perl, C 등 다양한 언어로 작성되었었다. 
		- 위를 지금 거의 안쓰는 이유는 Process loading방식이기 때문
			프로세스의 중요성***

	ASP.NET, Servlet/JSP



웹 컨테이너
	웹 컨테이너가 있으면 웹 컴포넌트가 있다.
	servlet/JSP가 웹 컴포넌트
	tomcat은 웹 컨테이너

	컴포넌트 - 생각을 재사용 ..?
	프레임 - GUI컨테이너 - 컨테이너 안에 컴포런트
	컴포런트 -파일    /     컨테이너 - _ ?

	- 웹컴포넌트(servlet/jsp 등) 실행 관리를 위한 프레임워크
	   ex) 톰캣, 레진, Glassfish 등
	- 서블릿과 웹 서버간의 커뮤니케이션 지원
		(웹서버 - 정적문서처리  웹컨테이너- 자바기술을 사용하기위해 -동적문서처리)
		톰캣이 어느정도 웹서버 역할을 한다. 대부분 동적문서처리
		(우리는 대부분 동적문서를 할꺼라 톰캣만으로 가능할것..)
	 - 서블릿 라이프사이클 관리 
			(참고 : 로컬베리어블은 메소드 밖으로 가면 사라진다)
		작업관리자를 켜둘것
	- 요청에 대한 멀티 스레딩 지원
		스레드를 컨테이너가 자체적으로 제공해준다.
	- 보안 및 오류에 대한 처리 지원
		웹컨테이너 웹컴포넌트를 잘 알면 전체를 이해 하기 좋다..


servlet -> server + let 작은 서버
	doGet / doPost 오버라이딩 하기
	


Servlet 인터페이스와 서블릿 라이프사이클
	init()/service()/destory()/getServletConfig()
	
	1. 요청에 의해 특정 서블릿 호출
	2. 해당 서블릿 생성 및 로드 (여기까지는 자바와 동일)
	3. init() 메소드 호출 (최초 1회 호출)
	4. service() 메소드 호출 (doGet/doPost)
	5. destroy() 메소드 호출 (destroy()가 오버라이딩 되었다는 가정하에 service()가 소멸 되기 전 destory()를 호출한다.)
						  (톰캣을 내릴때 destroy()호출을 확인할 수 있다. 통상적으로 확인하기 어려움)
						- 최초 사용자에 대한 이야기 / 최초 이후에는 init()호출안함
						 
	init() service() destroy()에 각각 무엇을 적어야할까?
	init() - 필요한 초기화 작업들
	service() -
	destroy() - 초기화 했던 작업들을 제거할때 사용
	
	init_초기화 desroy_파괴하다
	

인터페이스 - 객체를 만들수없다 추상화할수 없다?


false로 두고 


https://javaee.github.io/javaee-spec/javadocs/

os공부 필요


******반드시 기억할 것******
Tomcat
	-webapps(웹애플리케이션)
		-root
		-jv301 (패키지 아니고 애플리케이션jv301) -properties-web project settings-
				http://localhost:8080/root
				http://localhost:8080/jv301
				http://localhost:8080/jv301/mod004/abc.html
			-index.html(홈페이지는 대부분 인덱스페이지)
			-[폴더](ex)_mod004)
				-index(ex)_abc.html)
				-index
			-[폴더]
				-index
				-index       	 css /javascrpt 등이 WEB-INF위에 있다.
			-[WEB-INF](대분자구분) *외부로부터 직접적 접근을 허용하지 않는다. /servlet/com.varxyz.js301.mod004/AbcServlet .. 그러나 보안문제로 매핑을 한다. /mod004/abc.view로 한다.
								 http://localhost:8080/jv301/mod004/abc.view
								 http://localhost:8080/jv301/config.view (.view는 내가 정의)
				-web.xml(D.D)
				-classes
					-java (servlet..)
					-com.varxyz.js301.mod004
						-mod004
							-AbcServlet.class

jv301을 묶어서 jv301.war로 압축파일 만듬 _ 컴포넌트
